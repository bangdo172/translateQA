{"qas": [{"question": "What is the main difference between black-box testing and white-box testing?", "id": "57291acd3f37b3190047801d", "answers": [{"text": "seeing the source code", "answer_start": 138}], "is_impossible": false}, {"question": "What are the software testers aware of?", "id": "57291acd3f37b3190047801e", "answers": [{"text": "aware of what the software is supposed to do", "answer_start": 183}], "is_impossible": false}, {"question": "What are the first three methods mentioned that make up black-box testing??", "id": "57291acd3f37b3190047801f", "answers": [{"text": "equivalence partitioning, boundary value analysis", "answer_start": 284}], "is_impossible": false}, {"plausible_answers": [{"text": "a \"black box\",", "answer_start": 41}], "question": "Black-box testing treats data as what?", "id": "5a7b825121c2de001afea0d2", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "what the software is supposed to do, not how it does it.", "answer_start": 192}], "question": "Testers are always aware of what?", "id": "5a7b825121c2de001afea0d3", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "equivalence partitioning, boundary value analysis, all-pairs testing", "answer_start": 284}], "question": "What are the first three methods of white-box testing?", "id": "5a7b825121c2de001afea0d4", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "source", "answer_start": 149}], "question": "Black-box testing works with seeing what type of code?", "id": "5a7b825121c2de001afea0d5", "answers": [], "is_impossible": true}], "context": "Black-box testing treats the software as <b3_0>a \"black box\",<b3_0/> examining functionality without any knowledge of internal implementation, without <a0_0>seeing the <b6_0>source<b6_0/> code<a0_0/>. The testers are only <a1_0>aware of <b4_0>what the software is supposed to do<a1_0/>, not how it does it.<b4_0/> Black-box testing methods include: <a2_0><b5_0>equivalence partitioning, boundary value analysis<a2_0/>, all-pairs testing<b5_0/>, state transition tables, decision table testing, fuzz testing, model-based testing, use case testing, exploratory testing and specification-based testing."}