{"qas": [{"question": "Who proposed using a table to store data?", "id": "572f692804bcaa1900d768f5", "answers": [{"text": "Codd", "answer_start": 183}], "is_impossible": false}, {"question": "How is data accessed in a table?", "id": "572f692804bcaa1900d768f6", "answers": [{"text": "A linked-list system", "answer_start": 294}], "is_impossible": false}, {"question": "What model solved the problem of databases where information was missing?", "id": "572f692804bcaa1900d768f7", "answers": [{"text": "relational", "answer_start": 440}], "is_impossible": false}, {"question": "What system assists a user in seeing a table?", "id": "572f692804bcaa1900d768f8", "answers": [{"text": "DBMS", "answer_start": 722}], "is_impossible": false}, {"plausible_answers": [{"text": "Codd", "answer_start": 183}], "question": "Who proposed using a table to remove data?", "id": "5a8c34a2fd22b3001a8d8653", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "A linked-list system", "answer_start": 294}], "question": "How is data lost in a table?", "id": "5a8c34a2fd22b3001a8d8654", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "relational", "answer_start": 440}], "question": "What model couldn't solve the problem of databases where information was missing?", "id": "5a8c34a2fd22b3001a8d8655", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "DBMS", "answer_start": 722}], "question": "What system can't assist a user in seeing a table?", "id": "5a8c34a2fd22b3001a8d8656", "answers": [], "is_impossible": true}], "context": "In this paper, he described a new system for storing and working with large databases. Instead of records being stored in some sort of linked list of free-form records as in CODASYL, <a0_0><b4_0>Codd<b4_0/><a0_0/>'s idea was to use a \"table\" of fixed-length records, with each table used for a different type of entity. <a1_0><b5_0>A linked-list system<b5_0/><a1_0/> would be very inefficient when storing \"sparse\" databases where some of the data for any one record could be left empty. The <a2_0><b6_0>relational<b6_0/><a2_0/> model solved this by splitting the data into a series of normalized tables (or relations), with optional elements being moved out of the main table to where they would take up room only if needed. Data may be freely inserted, deleted and edited in these tables, with the <a3_0><b7_0>DBMS<b7_0/><a3_0/> doing whatever maintenance needed to present a table view to the application/user."}