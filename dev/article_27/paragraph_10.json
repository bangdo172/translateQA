{"qas": [{"question": "How many modern types of primality tests for general numbers n are there? ", "id": "57297d421d046914007794e5", "answers": [{"text": "two main classes", "answer_start": 65}, {"text": "two", "answer_start": 65}, {"text": "two", "answer_start": 65}, {"text": "two", "answer_start": 65}, {"text": "two", "answer_start": 65}], "is_impossible": false}, {"question": "What is the name of one type of modern primality test?", "id": "57297d421d046914007794e6", "answers": [{"text": "probabilistic (or \"Monte Carlo\")", "answer_start": 83}, {"text": "probabilistic (or \"Monte Carlo\")", "answer_start": 83}, {"text": "probabilistic", "answer_start": 83}, {"text": "probabilistic", "answer_start": 83}, {"text": "probabilistic", "answer_start": 83}], "is_impossible": false}, {"question": "What is the name of another type of modern primality test?", "id": "57297d421d046914007794e7", "answers": [{"text": "deterministic", "answer_start": 120}, {"text": "deterministic algorithms", "answer_start": 120}, {"text": "deterministic", "answer_start": 120}, {"text": "deterministic algorithms", "answer_start": 120}, {"text": "deterministic algorithms", "answer_start": 120}], "is_impossible": false}, {"question": "What type of algorithm is trial division?", "id": "57297d421d046914007794e8", "answers": [{"text": "deterministic", "answer_start": 275}, {"text": "deterministic algorithm", "answer_start": 275}, {"text": "deterministic", "answer_start": 275}, {"text": "deterministic", "answer_start": 275}, {"text": "deterministic", "answer_start": 275}], "is_impossible": false}, {"question": "When using a probabilistic algorithm, how is the probability that the number is composite expressed mathematically?", "id": "57297d421d046914007794e9", "answers": [{"text": "1/(1-p)n", "answer_start": 833}, {"text": "1/(1-p)n", "answer_start": 833}, {"text": "1/(1-p)n", "answer_start": 833}, {"text": "1/(1-p)n", "answer_start": 833}, {"text": "1/(1-p)n", "answer_start": 833}], "is_impossible": false}, {"plausible_answers": [{"text": "two main classes", "answer_start": 65}], "question": "How many modern types of algorithm tests for general numbers n are there?", "id": "5a892d303b2508001a72a4ee", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "probabilistic (or \"Monte Carlo\")", "answer_start": 83}], "question": "What is the name of one type of modern algorithm test?", "id": "5a892d303b2508001a72a4ef", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "deterministic", "answer_start": 275}], "question": "What is the name of another type of modern algorithm test?", "id": "5a892d303b2508001a72a4f0", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "deterministic", "answer_start": 275}], "question": "What type of algorithm is probability division?", "id": "5a892d303b2508001a72a4f1", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "1/(1-p)n", "answer_start": 833}], "question": "When using a probalistic primality, how is the probability that the number is composite expressed mathematically?", "id": "5a892d303b2508001a72a4f2", "answers": [], "is_impossible": true}], "context": "Modern primality tests for general numbers n can be divided into <a0_0><a0_1><a0_2><a0_3><a0_4><b5_0>two<a0_4/><a0_3/><a0_2/><a0_1/> main classes<b5_0/><a0_0/>, <a1_0><a1_1><a1_2><a1_3><a1_4><b6_0>probabilistic<a1_4/><a1_3/><a1_2/> (or \"Monte Carlo\")<b6_0/><a1_1/><a1_0/> and <a2_0><a2_1><a2_2><a2_3><a2_4>deterministic<a2_2/><a2_0/> algorithms<a2_4/><a2_3/><a2_1/>. Deterministic algorithms provide a way to tell for sure whether a given number is prime or not. For example, trial division is a <a3_0><a3_1><a3_2><a3_3><a3_4><b7_0><b8_0>deterministic<b8_0/><b7_0/><a3_4/><a3_3/><a3_2/><a3_0/> algorithm<a3_1/> because, if performed correctly, it will always identify a prime number as prime and a composite number as composite. Probabilistic algorithms are normally faster, but do not completely prove that a number is prime. These tests rely on testing a given number in a partly random way. For example, a given test might pass all the time if applied to a prime number, but pass only with probability p if applied to a composite number. If we repeat the test n times and pass every time, then the probability that our number is composite is <a4_0><a4_1><a4_2><a4_3><a4_4><b9_0>1/(1-p)n<b9_0/><a4_4/><a4_3/><a4_2/><a4_1/><a4_0/>, which decreases exponentially with the number of tests, so we can be as sure as we like (though never perfectly sure) that the number is prime. On the other hand, if the test ever fails, then we know that the number is composite."}